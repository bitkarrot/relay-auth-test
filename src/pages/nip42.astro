---
// HTML content to display as text (embedded directly to avoid build-time file reading issues)
const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NIP-42 AUTH with NIP-07 Extension Demo</title>
    <script src="https://unpkg.com/nostr-tools/lib/nostr.bundle.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px;
        }
        .button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .log {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        .status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-weight: bold;
        }
        .status.connected { background-color: #d4edda; color: #155724; }
        .status.disconnected { background-color: #f8d7da; color: #721c24; }
        .status.authenticating { background-color: #fff3cd; color: #856404; }
        .status.authenticated { background-color: #d1ecf1; color: #0c5460; }
        .key-info {
            background-color: #e9ecef;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-family: monospace;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>NIP-42 AUTH with NIP-07 Extension Demo</h1>
        <p>This demo connects to ws://localhost:3334 using a NIP-07 browser extension (like Alby or nos2x), performs NIP-42 authentication, and publishes a kind 30078 event.</p>
        
        <div class="key-info">
            <strong>NIP-07 Extension Signer:</strong><br>
            Public Key: <span id="pubkey">Not connected yet</span><br>
            Extension: <span id="extensionName">Not detected</span>
        </div>
        
        <div class="status disconnected" id="status">Disconnected</div>
        
        <button class="button" id="connectExtensionBtn" onclick="connectExtension()">Connect Extension</button>
        <button class="button" id="connectBtn" onclick="connectAndAuth()" disabled>Connect & Authenticate</button>
        <button class="button" id="publishBtn" onclick="publishEvent()" disabled>Publish Kind 30078 Event</button>
        <button class="button" onclick="clearLog()">Clear Log</button>
        
        <div class="log" id="log">Ready to connect...\\n</div>
    </div>

    <script>
        let relay = null;
        let publicKey = null;
        let isAuthenticated = false;
        let authChallenge = null;
        let extensionConnected = false;
        
        function log(message, statusText = null, statusClass = null) {
            const timestamp = new Date().toLocaleTimeString();
            console.log(\`[\${timestamp}] \${message}\`);
            
            // Update UI log if element exists
            const logElement = document.getElementById('log');
            if (logElement) {
                logElement.textContent += \`[\${timestamp}] \${message}\\n\`;
                logElement.scrollTop = logElement.scrollHeight;
            }
            
            // Update status if provided and element exists
            if (statusText && statusClass) {
                updateStatusUI(statusText, statusClass);
            }
        }

        function updateStatusUI(status, className) {
            const statusElement = document.getElementById('status');
            if (statusElement) {
                statusElement.textContent = status;
                statusElement.className = \`status \${className}\`;
            }
        }

        function clearLog() {
            document.getElementById('log').textContent = '';
        }

        async function connectExtension() {
            log('üîå Connecting to NIP-07 extension...');
            
            if (!window.nostr) {
                log('‚ùå No NIP-07 extension found. Please install Alby, nos2x, or another compatible extension.');
                return;
            }
            
            try {
                // Get public key from extension
                publicKey = await window.nostr.getPublicKey();
                extensionConnected = true;
                
                // Update UI
                document.getElementById('pubkey').textContent = publicKey;
                document.getElementById('extensionName').textContent = getExtensionName();
                document.getElementById('connectBtn').disabled = false;
                document.getElementById('connectExtensionBtn').textContent = 'Extension Connected ‚úì';
                document.getElementById('connectExtensionBtn').disabled = true;
                
                log(\`‚úÖ Connected to extension. Public key: \${publicKey}\`);
                
            } catch (error) {
                log(\`‚ùå Failed to connect to extension: \${error.message}\`);
            }
        }

        function getExtensionName() {
            if (window.nostr) {
                if (window.nostr.constructor.name === 'Alby') return 'Alby';
                if (window.nostr._metadata?.name) return window.nostr._metadata.name;
                if (window.alby) return 'Alby';
                if (window.nos2x) return 'nos2x';
                return 'Unknown NIP-07 Extension';
            }
            return 'Not detected';
        }

        async function signEvent(eventTemplate) {
            return await window.nostr.signEvent(eventTemplate);
        }

        function connectToRelay() {
            return new Promise((resolve, reject) => {
                log('üåê Connecting to relay: ws://localhost:3334');
                
                relay = new WebSocket('ws://localhost:3334');
                
                relay.onopen = function(event) {
                    log('‚úÖ Connected to relay', 'Connected', 'connected');
                    
                    // Enable publish button once connected and authenticated
                    if (isAuthenticated) {
                        document.getElementById('publishBtn').disabled = false;
                    }
                    resolve();
                };
                
                relay.onmessage = function(event) {
                    const message = JSON.parse(event.data);
                    log(\`üì• Received: \${JSON.stringify(message)}\`);
                    
                    if (message[0] === 'AUTH') {
                        authChallenge = message[1];
                        log(\`üîê Received AUTH challenge: \${authChallenge}\`);
                        performAuth();
                    } else if (message[0] === 'OK' && message[2] === true) {
                        if (message[3] && message[3].includes('auth-required')) {
                            log('‚úÖ Authentication successful!', 'Authenticated', 'authenticated');
                            isAuthenticated = true;
                            document.getElementById('publishBtn').disabled = false;
                        } else {
                            log(\`‚úÖ Event accepted: \${message[1]}\`);
                        }
                    } else if (message[0] === 'OK' && message[2] === false) {
                        log(\`‚ùå Event rejected: \${message[3]}\`);
                    }
                };
                
                relay.onerror = function(error) {
                    log(\`‚ùå WebSocket error: \${error}\`);
                    reject(error);
                };
                
                relay.onclose = function() {
                    log('üîå Connection closed', 'Disconnected', 'disconnected');
                    
                    // Reset state
                    isAuthenticated = false;
                    authChallenge = null;
                    
                    // Update UI
                    const connectBtn = document.getElementById('connectBtn');
                    const publishBtn = document.getElementById('publishBtn');
                    
                    connectBtn.disabled = false;
                    connectBtn.textContent = 'Connect & Authenticate';
                    publishBtn.disabled = true;
                };
            });
        }

        async function connectAndAuth() {
            if (!extensionConnected) {
                log('‚ùå Please connect to NIP-07 extension first');
                return;
            }
            
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.disabled = true;
            connectBtn.textContent = 'Connecting...';
            
            try {
                await connectToRelay();
                connectBtn.textContent = 'Connected';
            } catch (error) {
                connectBtn.disabled = false;
                connectBtn.textContent = 'Connect & Authenticate';
                log(\`‚ùå Failed to connect: \${error.message}\`);
            }
        }

        async function performAuth() {
            if (!authChallenge) {
                log('‚ùå No auth challenge received');
                return;
            }

            log('üîê Creating authentication event...', 'Authenticating...', 'authenticating');

            try {
                // Create the kind 22242 AUTH event template
                const authEventTemplate = {
                    kind: 22242,
                    created_at: Math.floor(Date.now() / 1000),
                    tags: [
                        ['relay', 'ws://localhost:3334'],
                        ['challenge', authChallenge]
                    ],
                    content: ''
                };

                // Sign the auth event using the selected signer
                const signedAuthEvent = await signEvent(authEventTemplate);
                log(\`üîè Signed AUTH event: \${signedAuthEvent.id}\`);

                // Send the AUTH message
                const authMessage = JSON.stringify(['AUTH', signedAuthEvent]);
                relay.send(authMessage);
                log('üì§ Sent AUTH event to relay');

            } catch (error) {
                log(\`‚ùå Auth error: \${error.message}\`, 'Auth Failed', 'disconnected');
            }
        }

        async function publishEvent() {
            if (!relay || !isAuthenticated) {
                log('‚ùå Not connected or not authenticated');
                return;
            }

            const publishBtn = document.getElementById('publishBtn');
            publishBtn.disabled = true;
            publishBtn.textContent = 'Publishing...';

            try {
                log('üìù Creating kind 30078 event...');

                // Create a kind 30078 event template (Application-specific data)
                const event30078Template = {
                    kind: 30078,
                    created_at: Math.floor(Date.now() / 1000),
                    tags: [
                        ['d', \`demo-\${Date.now()}\`], // identifier tag for kind 30078
                        ['title', 'NIP-42 AUTH Demo Event'],
                        ['description', 'This event was published after successful NIP-42 authentication']
                    ],
                    content: JSON.stringify({
                        message: 'Hello from authenticated client!',
                        timestamp: new Date().toISOString(),
                        demo: true,
                        auth_method: 'NIP-42',
                        signer_type: 'NIP-07'
                    })
                };

                // Sign the event using the selected signer
                const signedEvent = await signEvent(event30078Template);
                log(\`üìÑ Created kind 30078 event: \${signedEvent.id}\`);

                // Send the EVENT message
                const eventMessage = JSON.stringify(['EVENT', signedEvent]);
                relay.send(eventMessage);
                log('üì§ Sent kind 30078 event to relay');

                // Set up timeout for response
                setTimeout(() => {
                    publishBtn.disabled = false;
                    publishBtn.textContent = 'Publish Kind 30078 Event';
                }, 3000);

            } catch (error) {
                log(\`‚ùå Publish error: \${error.message}\`);
                publishBtn.disabled = false;
                publishBtn.textContent = 'Publish Kind 30078 Event';
            }
        }
    </script>
</body>
</html>`;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raw HTML Demo - NIP-42 AUTH</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #1f2937;
            color: #f9fafb;
        }
        .container {
            background: #374151;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            margin-bottom: 20px;
        }
        .code-block {
            background-color: #4b5563;
            border: 1px solid #6b7280;
            border-radius: 4px;
            padding: 15px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
            line-height: 1.4;
            overflow-x: auto;
            white-space: pre;
            max-height: 600px;
            overflow-y: auto;
            color: #f9fafb;
        }
        .copy-button {
            background-color: #3b82f6;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 10px;
            font-size: 14px;
        }
        .copy-button:hover {
            background-color: #2563eb;
        }
        .instructions {
            background-color: #4b5563;
            border: 1px solid #60a5fa;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 20px;
        }
        .instructions h3 {
            margin-top: 0;
            color: #60a5fa;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Raw HTML Demo - NIP-42 AUTH with NIP-07 Extension</h1>
        <p>This page displays the raw HTML code for a standalone NIP-42 authentication demo that connects to <code>ws://localhost:3334</code>.</p>
        
        <div class="instructions">
            <h3>üìã How to Use</h3>
            <ol>
                <li>Click the "Copy HTML Code" button below</li>
                <li>Create a new file called <code>nip42-demo.html</code> (or any name you prefer)</li>
                <li>Paste the copied code into the file</li>
                <li>Save the file and open it in your web browser</li>
                <li>Make sure you have a NIP-07 extension installed (like Alby or nos2x)</li>
                <li>Ensure your local relay is running on <code>ws://localhost:3334</code></li>
            </ol>
        </div>
        
        <button class="copy-button" onclick="copyToClipboard()">üìã Copy HTML Code</button>
        
        <div class="code-block" id="htmlCode">{htmlContent}</div>
    </div>

    <script>
        function copyToClipboard() {
            const htmlCode = document.getElementById('htmlCode').textContent;
            navigator.clipboard.writeText(htmlCode).then(() => {
                const button = document.querySelector('.copy-button');
                const originalText = button.textContent;
                button.textContent = '‚úÖ Copied!';
                button.style.backgroundColor = '#28a745';
                
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.backgroundColor = '#007bff';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy: ', err);
                alert('Failed to copy to clipboard. Please select and copy manually.');
            });
        }
    </script>
</body>
</html>
